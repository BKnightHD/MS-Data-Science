{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-cfb56696f8518b49",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "##### Module 2 Autograded Assignment\n",
    "\n",
    "This is a programming assignment for the material you have learned in Module 2. \n",
    "\n",
    "Cells marked with `#Hidden Test Cell` will contain tests on your code that are not visible to you. Be sure you are confident in your answers before submitting your assignment!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-058f3ba546c8e37d",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# Load Required Libraries\n",
    "library(testthat)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-b9e1c547ec0b321d",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "## Problem 1\n",
    "\n",
    "You work at a candy store and recently recieved a large shipment of boxes of assorted chocolates. Each box contains two types of chocolates, filled and unfilled, but you don't know how many of each are in each box. Your boss has given you the task of finding the proportion of chocolates that are filled and unfilled. Well, I guess we're going to have to eat some chocolates! Assume that each box comes from the same underlying distribution.\n",
    "\n",
    "Let $X_i, i \\in {1. \\dots, n}$ be a random variable for the number of chocolates you eat from a box *before* you eat an unfilled chocolate. This means $X$ has a Geometric distribution with some probability $p$:\n",
    "\n",
    "$$ f_X(x) = p(1-p)^xI_{\\{0,1,\\dots\\}}(x) $$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-feaf1ffad99c0d7b",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "**Part A)** What is the MLE $\\hat{p}$, given $X_1, \\dots, X_n$? Once you are ready to answer, give the integer number corresponding to your answer in the variable `prob.1.a`. (i.e. Possible answers are 1,2,3,4,5,6)\n",
    "\n",
    "1. $\\bar{X}$\n",
    "2. $1/\\bar{X}$\n",
    "3. $1 / (\\bar{X}+1)$\n",
    "4. $\\bar{X} / (1 - \\bar{X})$\n",
    "5. $(1 - \\bar{X}) / \\bar{X}$\n",
    "6. None of the above."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-ede92bde84bd8570",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "prob.1.a = NA\n",
    "\n",
    "### BEGIN SOLUTIONS HERE\n",
    "prob.1.a = 3\n",
    "### END SOLUTIONS HERE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-94b7b30a06bebc30",
     "locked": true,
     "points": 6,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# Hidden Test Cell\n",
    "test_that(\"Make sure your answer is a numeric!\", expect_is(prob.1.a, \"numeric\"))\n",
    "### BEGIN HIDDEN TESTS\n",
    "test_that(\"Problem 1.a\", expect_equal(prob.1.a, 3))\n",
    "### END HIDDEN TESTS"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-b39df226bed1af9b",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "**Part B)** \n",
    "\n",
    "We have a theoretical understanding of what $\\hat{p}$ should be, but let's she what that value is when we have actual data.\n",
    "\n",
    "The cell below loads 10 samples of this random variable. In other words, we opened 10 boxes of chocolates, and recorded the number of chocolates we had to eat before we found an unfilled chocolate. We only have 10, because we needed a break from the chocolate at that point. Using that data, calculate $\\hat{p}$ of your sample. Save your solution as `p.hat`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-5365eb90f7bc8ad4",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>1</li><li>1</li><li>7</li><li>0</li><li>3</li><li>0</li><li>1</li><li>4</li><li>4</li><li>0</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 1\n",
       "\\item 1\n",
       "\\item 7\n",
       "\\item 0\n",
       "\\item 3\n",
       "\\item 0\n",
       "\\item 1\n",
       "\\item 4\n",
       "\\item 4\n",
       "\\item 0\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 1\n",
       "2. 1\n",
       "3. 7\n",
       "4. 0\n",
       "5. 3\n",
       "6. 0\n",
       "7. 1\n",
       "8. 4\n",
       "9. 4\n",
       "10. 0\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1] 1 1 7 0 3 0 1 4 4 0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Load the data\n",
    "trials = readRDS(\"trials.rds\")\n",
    "trials"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-64db55b4032a8e8b",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "0.32258064516129"
      ],
      "text/latex": [
       "0.32258064516129"
      ],
      "text/markdown": [
       "0.32258064516129"
      ],
      "text/plain": [
       "[1] 0.3225806"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "p.hat = NA\n",
    "### BEGIN SOLUTION HERE\n",
    "p.hat = 1/(mean(trials)+1)\n",
    "p.hat\n",
    "### END SOLUTION HERE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-18725bcff25fbc86",
     "locked": true,
     "points": 6,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# Hidden Test Cell\n",
    "### BEGIN HIDDEN TESTS\n",
    "p.hat.answer = 1/(mean(trials)+1)\n",
    "test_that(\"Checking sample calculations\", expect_equal(p.hat, p.hat.answer, tol=1e-3))\n",
    "### END HIDDEN TESTS"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-b053fb7607acd2db",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "**Part C)**\n",
    "\n",
    "Remember, an estimator is still a random variable. That means the $\\hat{p}$ we calculated in **Part B** is just one instance from some underlying sampling distribution for $\\hat{p}$. Let's take a look at what this underlying distribution look like.\n",
    "\n",
    "The cell below loads a table containing 1000 instances of the above trials. That is, we opened 10 boxes and, for each box, recorded the number of chocolates that we observed before one was unfilled. Then we repeated that process 1000 times. That's a lot of chocolate.\n",
    "\n",
    "Calculate the $\\hat{p}$ for each instance of the data. This should result in a vector of length 1000. Then plot a histogram of these $\\hat{p}$ values.\n",
    "\n",
    "Save four statistics from these $\\hat{p}$'s:\n",
    "* The sample mean as `p.hat.sample.mean`.\n",
    "* The sample standard deviation as `p.hat.sample.sd`.\n",
    "* The sample minimum as `p.hat.sample.min`.\n",
    "* The sample maximum as `p.hat.sample.max`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-b2c252d8378a21d5",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A data.frame: 6 × 10</caption>\n",
       "<thead>\n",
       "\t<tr><th></th><th scope=col>box1</th><th scope=col>box2</th><th scope=col>box3</th><th scope=col>box4</th><th scope=col>box5</th><th scope=col>box6</th><th scope=col>box7</th><th scope=col>box8</th><th scope=col>box9</th><th scope=col>box10</th></tr>\n",
       "\t<tr><th></th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><th scope=row>1</th><td>0</td><td>1</td><td>1</td><td>6</td><td>1</td><td>4</td><td>4</td><td>0</td><td>1</td><td>9</td></tr>\n",
       "\t<tr><th scope=row>2</th><td>0</td><td>6</td><td>1</td><td>8</td><td>1</td><td>0</td><td>0</td><td>2</td><td>0</td><td>5</td></tr>\n",
       "\t<tr><th scope=row>3</th><td>0</td><td>6</td><td>2</td><td>3</td><td>1</td><td>0</td><td>0</td><td>2</td><td>1</td><td>0</td></tr>\n",
       "\t<tr><th scope=row>4</th><td>3</td><td>6</td><td>2</td><td>2</td><td>2</td><td>3</td><td>0</td><td>6</td><td>0</td><td>3</td></tr>\n",
       "\t<tr><th scope=row>5</th><td>1</td><td>2</td><td>0</td><td>0</td><td>2</td><td>2</td><td>3</td><td>0</td><td>2</td><td>2</td></tr>\n",
       "\t<tr><th scope=row>6</th><td>0</td><td>1</td><td>0</td><td>0</td><td>2</td><td>0</td><td>0</td><td>2</td><td>4</td><td>3</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A data.frame: 6 × 10\n",
       "\\begin{tabular}{r|llllllllll}\n",
       "  & box1 & box2 & box3 & box4 & box5 & box6 & box7 & box8 & box9 & box10\\\\\n",
       "  & <int> & <int> & <int> & <int> & <int> & <int> & <int> & <int> & <int> & <int>\\\\\n",
       "\\hline\n",
       "\t1 & 0 & 1 & 1 & 6 & 1 & 4 & 4 & 0 & 1 & 9\\\\\n",
       "\t2 & 0 & 6 & 1 & 8 & 1 & 0 & 0 & 2 & 0 & 5\\\\\n",
       "\t3 & 0 & 6 & 2 & 3 & 1 & 0 & 0 & 2 & 1 & 0\\\\\n",
       "\t4 & 3 & 6 & 2 & 2 & 2 & 3 & 0 & 6 & 0 & 3\\\\\n",
       "\t5 & 1 & 2 & 0 & 0 & 2 & 2 & 3 & 0 & 2 & 2\\\\\n",
       "\t6 & 0 & 1 & 0 & 0 & 2 & 0 & 0 & 2 & 4 & 3\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A data.frame: 6 × 10\n",
       "\n",
       "| <!--/--> | box1 &lt;int&gt; | box2 &lt;int&gt; | box3 &lt;int&gt; | box4 &lt;int&gt; | box5 &lt;int&gt; | box6 &lt;int&gt; | box7 &lt;int&gt; | box8 &lt;int&gt; | box9 &lt;int&gt; | box10 &lt;int&gt; |\n",
       "|---|---|---|---|---|---|---|---|---|---|---|\n",
       "| 1 | 0 | 1 | 1 | 6 | 1 | 4 | 4 | 0 | 1 | 9 |\n",
       "| 2 | 0 | 6 | 1 | 8 | 1 | 0 | 0 | 2 | 0 | 5 |\n",
       "| 3 | 0 | 6 | 2 | 3 | 1 | 0 | 0 | 2 | 1 | 0 |\n",
       "| 4 | 3 | 6 | 2 | 2 | 2 | 3 | 0 | 6 | 0 | 3 |\n",
       "| 5 | 1 | 2 | 0 | 0 | 2 | 2 | 3 | 0 | 2 | 2 |\n",
       "| 6 | 0 | 1 | 0 | 0 | 2 | 0 | 0 | 2 | 4 | 3 |\n",
       "\n"
      ],
      "text/plain": [
       "  box1 box2 box3 box4 box5 box6 box7 box8 box9 box10\n",
       "1 0    1    1    6    1    4    4    0    1    9    \n",
       "2 0    6    1    8    1    0    0    2    0    5    \n",
       "3 0    6    2    3    1    0    0    2    1    0    \n",
       "4 3    6    2    2    2    3    0    6    0    3    \n",
       "5 1    2    0    0    2    2    3    0    2    2    \n",
       "6 0    1    0    0    2    0    0    2    4    3    "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "chocolate.data = read.csv(\"more_chocolate.csv\")\n",
    "chocolate.data = chocolate.data[-1]\n",
    "head(chocolate.data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-72bd38935549dfdb",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "0.319400297784562"
      ],
      "text/latex": [
       "0.319400297784562"
      ],
      "text/markdown": [
       "0.319400297784562"
      ],
      "text/plain": [
       "[1] 0.3194003"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "0.0882115700451171"
      ],
      "text/latex": [
       "0.0882115700451171"
      ],
      "text/markdown": [
       "0.0882115700451171"
      ],
      "text/plain": [
       "[1] 0.08821157"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "0.136986301369863"
      ],
      "text/latex": [
       "0.136986301369863"
      ],
      "text/markdown": [
       "0.136986301369863"
      ],
      "text/plain": [
       "[1] 0.1369863"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "0.666666666666667"
      ],
      "text/latex": [
       "0.666666666666667"
      ],
      "text/markdown": [
       "0.666666666666667"
      ],
      "text/plain": [
       "[1] 0.6666667"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA0gAAANICAMAAADKOT/pAAAC/VBMVEUAAAABAQECAgIDAwME\nBAQFBQUGBgYHBwcICAgJCQkKCgoLCwsMDAwNDQ0ODg4PDw8QEBARERESEhITExMUFBQVFRUW\nFhYXFxcYGBgZGRkaGhobGxscHBwdHR0eHh4fHx8gICAhISEiIiIjIyMkJCQlJSUmJiYnJyco\nKCgpKSkqKiorKyssLCwtLS0uLi4vLy8wMDAxMTEyMjIzMzM0NDQ1NTU2NjY3Nzc4ODg5OTk6\nOjo7Ozs8PDw9PT0+Pj4/Pz9AQEBBQUFCQkJDQ0NERERFRUVGRkZHR0dISEhJSUlKSkpLS0tM\nTExNTU1OTk5PT09QUFBRUVFSUlJTU1NUVFRVVVVWVlZXV1dYWFhZWVlaWlpbW1tcXFxdXV1e\nXl5fX19gYGBhYWFiYmJjY2NkZGRlZWVmZmZnZ2doaGhpaWlqampra2tsbGxtbW1ubm5vb29w\ncHBxcXFzc3N0dHR1dXV2dnZ3d3d4eHh5eXl6enp7e3t8fHx9fX1+fn5/f3+AgICBgYGCgoKD\ng4OEhISFhYWGhoaHh4eIiIiJiYmKioqLi4uMjIyNjY2Ojo6Pj4+QkJCRkZGSkpKTk5OUlJSV\nlZWWlpaXl5eYmJiZmZmampqbm5ucnJydnZ2enp6fn5+goKChoaGioqKjo6OkpKSlpaWmpqan\np6eoqKipqamqqqqrq6usrKytra2urq6vr6+wsLCxsbGysrKzs7O0tLS1tbW2tra3t7e4uLi5\nubm6urq7u7u8vLy9vb2+vr6/v7/AwMDBwcHCwsLDw8PExMTFxcXGxsbHx8fIyMjJycnKysrL\ny8vMzMzNzc3Ozs7Pz8/Q0NDR0dHS0tLT09PU1NTV1dXW1tbX19fY2NjZ2dna2trb29vc3Nzd\n3d3e3t7f39/g4ODh4eHi4uLj4+Pk5OTl5eXm5ubn5+fo6Ojp6enq6urr6+vs7Ozt7e3u7u7v\n7+/w8PDx8fHy8vLz8/P09PT19fX29vb39/f4+Pj5+fn6+vr7+/v8/Pz9/f3+/v7///9B8z1b\nAAAACXBIWXMAABJ0AAASdAHeZh94AAAgAElEQVR4nO3dC3hcZZnA8S9NJ2l6IQRoLYVeuHTZ\nxZVeuCqF7doKSCktotSCbEOjVChYLLsFLRSKUGxXULFcVVQUtUIRRURqKSsKClR0waqEwkqx\n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\nF+E3XDAo+1Qd39plEVJ1Cg77HV2E37Bt3BFtmW1CyiKk6hT5XDtvXcPFmU1CyiKk6hQ9JO/N\nNzJbDy8psBshKRBS3BURkhIhKRBS3BGSjJCgRkgyQoIaIckICWqEJCMkqBGSjJCgRkgyQoIa\nIckICWqEJCMkqBGSjJCgRkgyQoIaIckICWqEJCMkqBGSjJCgRkgyQoIaIckICWqEJCMkqBGS\njJCgRkgyQoIaIckICWqEJCMkqBGSjJCgRkgyQoIaIckICWqEJCMkqBGSjJCgRkgyQoIaIckI\nCWqEJCMkqBGSjJCgRkgyQoIaIckICWqEJCMkqBGSjJCgRkgyQoIaIckICWqEJCMkqBGSjJCg\nRkgyQoIaIckICWqEJCMkqBGSjJCgRkgyQoIaIckICWqEJCMkqBGSjJCgRkgyQoIaIckICWqE\nJCMkqBGSjJCgRkgyQoIaIckICWqEJCMkqBGSjJCgRkgyQoIaIckICWqEJCMkqBGSjJCgRkgy\nQoIaIckICWqEJCMkqBGSjJCgRkgyQoIaIckICWqEJCMkqBGSjJCgRkgyQoIaIckICWqEJCMk\nqBGSjJCgRkgyQoIaIckICWqEJCMkqBGSjJCgRkgyQoIaIckICWqEJCMkqBGSjJCgRkgyQoIa\nIckICWqEJCMkqBGSjJCgRkgyQoIaIckICWqEJCMkqBGSjJCgRkgyQoIaIckICWqEJCMkqBGS\njJCgRkgyQoIaIckICWqEJCMkqBGSjJCgRkgyQoIaIckICWqEJCMkqBGSjJCgRkgyQoIaIckI\nCWqEJCMkqBUTUsf6VStXrn4xZC9CUihfSGv3bopgn99GGFVVooe0af4QlzJi8bZC+xGSQvlC\nuq9+RQT1P4kwqqpEDmnjAW5086KlSxfOHObGbCqwIyEpRApp+vtu2X0X9Iuyvv6EFCJySC2J\nFZ1b7ctr5hXYkZAUIoU0OnHg7muqibI+QgoTOaShs7PbM4YX2JGQFCKFVMb1EVKYyCElrs5u\nX1FXYEdCUiCkuIsc0sgzstvTRhXYkZAUCCnuIoc0r2bZjvTW1svdggI7EpICIcVd5JA2j3eD\nJjVfMHfWxP7uuC0FdiQkBUKKu+i/R9p53dja5K+REsfc2l5oP0JSIKS4K+oUoe3Prl3bmi+T\nv7738MAhbkcxM7r701GHR9DnlgijCClASGGKPddu5+MPPd/z2u1fvDZwnu1XpPvqro2g0h+o\n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\nAAAASUVORK5CYII=",
      "text/plain": [
       "Plot with title “Histogram of p.hats”"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 420,
       "width": 420
      },
      "text/plain": {
       "height": 420,
       "width": 420
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "p.hat.sample.mean = NA\n",
    "p.hat.sample.sd = NA\n",
    "p.hat.sample.min = NA\n",
    "p.hat.sample.max = NA\n",
    "\n",
    "### BEGIN SOLUTION HERE\n",
    "# Calculate the phat of each row\n",
    "p.hats = apply(chocolate.data[], 1, (function(row) 1/(mean(row)+1)) )\n",
    "# Plot the histogram of p.hats\n",
    "hist(p.hats)\n",
    "                                     \n",
    "# Save the mean and standard deviation of p.hats\n",
    "p.hat.sample.mean = mean(p.hats)\n",
    "p.hat.sample.sd = sd(p.hats)\n",
    "p.hat.sample.min = min(p.hats)\n",
    "p.hat.sample.max = max(p.hats)\n",
    "### END SOLUTION HERE\n",
    "p.hat.sample.mean\n",
    "p.hat.sample.sd\n",
    "p.hat.sample.min\n",
    "p.hat.sample.max"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-3ff1b5720ba70424",
     "locked": true,
     "points": 10,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# Hidden Test Cell\n",
    "### BEGIN HIDDEN TESTS\n",
    "p.hats = apply(chocolate.data[], 1, (function(row) 1/(mean(row)+1)) )\n",
    "mean.answer = mean(p.hats)\n",
    "sd.answer = sd(p.hats)\n",
    "min.answer = min(p.hats)\n",
    "max.answer = max(p.hats)\n",
    "test_that(\"Checking p.hat statistics\", {expect_equal(p.hat.sample.mean, mean.answer, tol=1e-3)\n",
    "                                        expect_equal(p.hat.sample.sd, sd.answer, tol=1e-3)\n",
    "                                        expect_equal(p.hat.sample.min, min.answer, tol=1e-3)\n",
    "                                        expect_equal(p.hat.sample.max, max.answer, tol=1e-3)})\n",
    "### END HIDDEN TESTS"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-c1117e61893236e9",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "**Thought Exercise**\n",
    "\n",
    "The underlying probability for this question was $p=0.3$. Take a look at the histogram and the calculated values around your $\\hat{p}$'s. How similar was the MLE to the actual value? "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-a47cfe226df2dbee",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "**Part D)** \n",
    "\n",
    "Another important thing to note is that we only opened $10$ boxes for each trial. Would our sample $\\hat{p}$ histogram be wider if we opened more boxes for each trial, say 20? Submit your answer by saving either `wider`, `narrower` or `same` into variable `prob.1.d`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-4df6a501075dbdb0",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "prob.1.d = NA\n",
    "\n",
    "### BEGIN SOLUTION HERE\n",
    "prob.1.d = \"narrower\"\n",
    "### END SOLUTION HERE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-b9f01795c32776c0",
     "locked": true,
     "points": 6,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# Hidden Test Cell\n",
    "test_that(\"Make sure answer is within group\", expect_true(prob.1.d %in% c(\"wider\", \"narrower\", \"same\")))\n",
    "### BEGIN HIDDEN TESTS\n",
    "test_that(\"Test Prob.1.d\", expect_equal(prob.1.d, \"narrower\"))\n",
    "### END HIDDEN TESTS"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-44b5691a2725aa98",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "# Problem 2\n",
    "\n",
    "Let $X_i \\sim Poisson(\\lambda), i\\in{1,\\dots,n}$ with $\\lambda = 5$. Recall that the MLE $\\hat\\lambda$ for a Poisson distribution is equal to the sample mean $\\bar{X}$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-9c8dc0199a0228bc",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "**Part A)** \n",
    "\n",
    "The data being created into `prob.2.a.data` is 12 random samples from the $Poisson(5)$ distribution. Calculate the observed MLE, as well as the theoretical variance and bias for the MLE. (Your variance and bias calculations will have nothing to do with the generated data.) Store the your answers in `mle`, `mle.var` and `mle.bias` respectively."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-eb1ecd9f8838cc2e",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>8</li><li>4</li><li>4</li><li>5</li><li>8</li><li>3</li><li>8</li><li>9</li><li>6</li><li>6</li><li>2</li><li>3</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 8\n",
       "\\item 4\n",
       "\\item 4\n",
       "\\item 5\n",
       "\\item 8\n",
       "\\item 3\n",
       "\\item 8\n",
       "\\item 9\n",
       "\\item 6\n",
       "\\item 6\n",
       "\\item 2\n",
       "\\item 3\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 8\n",
       "2. 4\n",
       "3. 4\n",
       "4. 5\n",
       "5. 8\n",
       "6. 3\n",
       "7. 8\n",
       "8. 9\n",
       "9. 6\n",
       "10. 6\n",
       "11. 2\n",
       "12. 3\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1] 8 4 4 5 8 3 8 9 6 6 2 3"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "set.seed(0)\n",
    "lambda = 5\n",
    "n = 12\n",
    "prob.2.a.data = rpois(n, lambda)\n",
    "prob.2.a.data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-91bfb2856dac113a",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "5.5"
      ],
      "text/latex": [
       "5.5"
      ],
      "text/markdown": [
       "5.5"
      ],
      "text/plain": [
       "[1] 5.5"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "0.416666666666667"
      ],
      "text/latex": [
       "0.416666666666667"
      ],
      "text/markdown": [
       "0.416666666666667"
      ],
      "text/plain": [
       "[1] 0.4166667"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "0"
      ],
      "text/latex": [
       "0"
      ],
      "text/markdown": [
       "0"
      ],
      "text/plain": [
       "[1] 0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "mle = NA\n",
    "mle.var = NA\n",
    "mle.bias = NA\n",
    "\n",
    "### BEGIN SOLUTION HERE\n",
    "# MLE = xbar\n",
    "mle = mean(prob.2.a.data)\n",
    "# var(mle) = var(xbar) = sigma^2/n = lambda/n = 5/12\n",
    "mle.var = 5/12\n",
    "# bias(mle) = E[xbar] - lambda = lambda - lambda = 0\n",
    "mle.bias = 0\n",
    "### END SOLUTION HERE\n",
    "mle\n",
    "mle.var\n",
    "mle.bias"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-9f493a0cb93f18ce",
     "locked": true,
     "points": 7,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# Hidden Test Cell\n",
    "### BEGIN HIDDEN TESTS\n",
    "mle.answer = mean(prob.2.a.data)\n",
    "mle.var.answer = lambda / n\n",
    "mle.bias.answer = 0\n",
    "\n",
    "test_that(\"Checking MLE\", {expect_equal(mle, mle.answer)\n",
    "                           expect_equal(mle.var, mle.var.answer)\n",
    "                           expect_equal(mle.bias, mle.bias.answer)})\n",
    "### END HIDDEN TESTS"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-f403cc91cc3e7977",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "**Part B)**\n",
    "\n",
    "What is the $MSE(\\hat\\lambda)$? Save your answer as `mse`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-22e2c3afdc8abed6",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "0.416666666666667"
      ],
      "text/latex": [
       "0.416666666666667"
      ],
      "text/markdown": [
       "0.416666666666667"
      ],
      "text/plain": [
       "[1] 0.4166667"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "mse = NA\n",
    "\n",
    "### BEGIN SOLUTION HERE\n",
    "# mse(mle) = var(mle) + bias(mle)^2\n",
    "mse = mle.var + mle.bias^2\n",
    "### END SOLUTION HERE\n",
    "mse"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-4027aa506eaa581e",
     "locked": true,
     "points": 7,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# Hidden Test Cell\n",
    "### BEGIN HIDDEN TESTS\n",
    "test_that(\"mse\", expect_equal(mse, mle.var))\n",
    "### END HIDDEN TESTS"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-fbbc3201f1f98a4f",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "**Part C)**\n",
    "\n",
    "Let the MLE from **Part A** be denoted $\\hat\\lambda_1$. The data be created into `prob.2.c.data` is 8 samples from the $Poisson(5)$ distribution. Let the MLE for this distribution be $\\hat\\lambda_2$. What is the relative efficiency of $\\hat\\lambda_1$, realtive to $\\hat\\lambda_2$? Save your answer as `rel.eff`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-5a10a5a69829eda6",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>4</li><li>6</li><li>8</li><li>6</li><li>6</li><li>7</li><li>4</li><li>6</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 4\n",
       "\\item 6\n",
       "\\item 8\n",
       "\\item 6\n",
       "\\item 6\n",
       "\\item 7\n",
       "\\item 4\n",
       "\\item 6\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 4\n",
       "2. 6\n",
       "3. 8\n",
       "4. 6\n",
       "5. 6\n",
       "6. 7\n",
       "7. 4\n",
       "8. 6\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] 4 6 8 6 6 7 4 6"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "set.seed(112358)\n",
    "n.2 = 8\n",
    "prob.2.c.data = rpois(n.2, lambda)\n",
    "prob.2.c.data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-1ebe2fb8afa9cb1d",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "1.5"
      ],
      "text/latex": [
       "1.5"
      ],
      "text/markdown": [
       "1.5"
      ],
      "text/plain": [
       "[1] 1.5"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "rel.eff = NA\n",
    "\n",
    "### BEGIN SOLUTION HERE\n",
    "# rel.eff = var(lambda_2) / var(lambda_1)\n",
    "# Remember var(lambda.hat) = var(xbar) = sigma^2/n = lambda/n\n",
    "rel.eff = (5/8) / (5/12)\n",
    "### END SOLUTION HERE\n",
    "rel.eff"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-f55d275d077cca1b",
     "locked": true,
     "points": 8,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# Hidden Test Cell\n",
    "### BEGIN HIDDEN TESTS\n",
    "test_that(\"relative efficiency\", expect_equal(rel.eff, (lambda/n.2)/(lambda/n), tol=0.1))\n",
    "### END HIDDEN TESTS"
   ]
  }
 ],
 "metadata": {
  "celltoolbar": "Create Assignment",
  "kernelspec": {
   "display_name": "R",
   "language": "R",
   "name": "ir"
  },
  "language_info": {
   "codemirror_mode": "r",
   "file_extension": ".r",
   "mimetype": "text/x-r-source",
   "name": "R",
   "pygments_lexer": "r",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
